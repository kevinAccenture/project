<project name="simulator" default="main" basedir=".">
    <description>
        stack build file
    </description>
    <!-- set global properties for this build -->
    <property name="src.dir" value="src"/>
    <property name="doc.dir" value="documentation"/>
    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="${build.dir}/jar"/>
    <property name="test.dir" value="${build.dir}/test"/>
    <property name="main-class" value="simulator.Simulator"/>
    <property name="test-class" value="simulator.TestRunner"/>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="documentation"/>
    </target>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${doc.dir}"/>
    </target>

    <path id="classpath">
        <path location="lib">
            <fileset dir="lib/jar_files" includes="*.jar" />
        </path>
<!--        <path location="${build.dir}/classes/simulator/Simulator"/>-->
        <path >
            <pathelement location = "lib/jar_files/junit-jupiter-api-5.7.1.jar" />
<!--            <pathelement location = "${test.dir}" />-->
            <pathelement location = "${src.dir}" />
        </path>
        <path location="${classes.dir}"/>
    </path>

    <target name="compile" depends="init"
            description="compile the source">
        <!-- Compile the Java code from ${src dir} into ${classes dir} -->
        <mkdir dir="${classes.dir}"/>
        <javac classpathref="classpath" includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}"/>
    </target>

    <target name="doc" >
        <javadoc classpathref="classpath" sourcepath="${src.dir}" destdir="${doc.dir}">
            <fileset dir="."/>
        </javadoc>
    </target>

<!--    <target name="Junit">-->
<!--        -->
<!--    </target>-->

    <target name="jar" depends="compile"
            description="generate the jar file">
        <!-- Create the distribution directory -->
        <mkdir dir="${jar.dir}"/>
        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}" />
                <attribute name="Test-Class" value="${test-class}" />
            </manifest>
        </jar>
    </target>



    <target name="run" depends="jar">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>

    </target>

    <target name="clean-build" depends="clean,jar"/>
<!--    <target name="main" depends="clean,run">-->
<!--        <java classpathref="classpath" classname="TestStack" fork="true"/>-->
<!--    </target>-->

    <target name="main" depends="clean, run, test, doc">

    </target>
    <target name = "test" >
         <java classpathref="classpath" classname="${test-class}" fork="true"/>
    </target>

<!--    <at-->

<!--     <target name="copy" >
        <copy overwrite="true" todir="lib">
            <fileset dir="{$basedir}/${lib}/${Junit}" includes="*.jar"></fileset>
        </copy>
    </target> -->

  <!--   <target name = "test" depends = "compile">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid = "classpath.test"/>
                <pathelement location="${build.tests}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

            <formatter type="plain" usefile = "false"  />

            <test name="Test" haltonfailure="no" outfile="result">
                <formatter type="xml"/>
            </test>
        </junit>
    </target> -->

<!--    <target name="clean"-->
<!--            description="clean up">-->
<!--        &lt;!&ndash; Delete the ${build} and ${dist} directory trees &ndash;&gt;-->
<!--        <delete dir="${build}"/>-->
<!--        <delete dir="${dist}"/>-->
<!--    </target>-->
</project>